// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const getBotSettings = async () => {
  try {
    const response = await fetch('/api/admin/bot');
    if (response.ok) {
      return await response.json();
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –∏ –µ–≥–æ chat_id
export const getBotInfo = async () => {
  try {
    const settings = await getBotSettings();
    if (!settings || !settings.bot_token) {
      console.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return null;
    }
    
    const response = await fetch(`https://api.telegram.org/bot${settings.bot_token}/getMe`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id)
export const getUpdates = async () => {
  try {
    const settings = await getBotSettings();
    if (!settings || !settings.bot_token) {
      console.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return null;
    }
    
    const response = await fetch(`https://api.telegram.org/bot${settings.bot_token}/getUpdates`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
export const sendTelegramMessage = async (message, chatId = null) => {
  try {
    const settings = await getBotSettings();
    if (!settings || !settings.bot_token) {
      console.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return { success: false, error: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
    }
    
    if (!settings.enabled) {
      console.log('–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
      return { success: false, error: '–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω' };
    }
    
    // –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    let targetChatId = chatId || settings.chat_id;
    
    if (!targetChatId) {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const updates = await getUpdates();
      if (updates && updates.ok && updates.result.length > 0) {
        // –ë–µ—Ä–µ–º chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const lastMessage = updates.result[updates.result.length - 1];
        targetChatId = lastMessage.message?.chat?.id || lastMessage.channel_post?.chat?.id;
      }
    }
    
    if (!targetChatId) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return { success: false, error: 'Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É.' };
    }

    const response = await fetch(`https://api.telegram.org/bot${settings.bot_token}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: targetChatId,
        text: message,
        parse_mode: 'HTML'
      }),
    });

    const data = await response.json();
    
    if (data.ok) {
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      return { success: true, data };
    } else {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', data);
      return { success: false, error: data.description };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return { success: false, error: error.message };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
export const formatOrderMessage = (orderData) => {
  const {
    orderForm,
    cartItems,
    priceCalculation,
    orderNumber
  } = orderData;

  const orderDate = new Date().toLocaleString('ru-RU', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });

  let message = `üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderNumber}</b>\n\n`;
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
  message += `üë§ <b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n`;
  message += `‚Ä¢ –ò–º—è: ${orderForm.name}\n`;
  message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${orderForm.phone}\n`;
  if (orderForm.email) {
    message += `‚Ä¢ Email: ${orderForm.email}\n`;
  }
  
  // –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è
  message += `\nüì¶ <b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> ${orderForm.deliveryMethod === 'pickup' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–î–æ—Å—Ç–∞–≤–∫–∞'}\n`;
  if (orderForm.deliveryMethod === 'delivery' && orderForm.address) {
    message += `üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${orderForm.address}\n`;
  }
  
  // –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
  const paymentMethods = {
    'cash': '–ù–∞–ª–∏—á–Ω—ã–º–∏',
    'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π',
    'transfer': '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥'
  };
  message += `üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ${paymentMethods[orderForm.paymentMethod]}\n`;
  
  // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  if (orderForm.comment) {
    message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${orderForm.comment}\n`;
  }
  
  // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  message += `\nüõçÔ∏è <b>–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n`;
  cartItems.forEach((item, index) => {
    const total = item.price * item.quantity;
    message += `${index + 1}. ${item.title}\n`;
    if (item.brand) {
      message += `   –ë—Ä–µ–Ω–¥: ${item.brand}\n`;
    }
    message += `   –¶–µ–Ω–∞: ${item.price.toLocaleString()} ‚ÇΩ √ó ${item.quantity} —à—Ç = ${total.toLocaleString()} ‚ÇΩ\n\n`;
  });
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
  message += `üí∞ <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>\n`;
  message += `‚Ä¢ –ü–æ–¥—ã—Ç–æ–≥: ${priceCalculation.subtotal.toLocaleString()} ‚ÇΩ\n`;
  
  if (priceCalculation.appliedPromotion) {
    message += `‚Ä¢ –°–∫–∏–¥–∫–∞ "${priceCalculation.appliedPromotion.title}" (${priceCalculation.appliedPromotion.discount}%): -${priceCalculation.discountAmount.toLocaleString()} ‚ÇΩ\n`;
  }
  
  if (priceCalculation.appliedPromocode) {
    const promocodeType = priceCalculation.appliedPromocode.discountType === 'percent' ? '%' : '‚ÇΩ';
    const promocodeValue = priceCalculation.appliedPromocode.discountType === 'percent' 
      ? `${priceCalculation.appliedPromocode.discount}%` 
      : `${priceCalculation.appliedPromocode.discount.toLocaleString()} ‚ÇΩ`;
    
    message += `‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ "${priceCalculation.appliedPromocode.code}" (${promocodeValue}): -${priceCalculation.promocodeDiscount.toLocaleString()} ‚ÇΩ\n`;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å –∞–∫—Ü–∏—è–º–∏
    if (priceCalculation.appliedPromocode.stackable) {
      message += `  ‚îî –°—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –∞–∫—Ü–∏—è–º–∏\n`;
    } else {
      message += `  ‚îî –ù–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –∞–∫—Ü–∏—è–º–∏\n`;
    }
  }
  
  message += `‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n`;
  message += `<b>‚Ä¢ –ò–¢–û–ì–û –ö –û–ü–õ–ê–¢–ï: ${priceCalculation.total.toLocaleString()} ‚ÇΩ</b>\n\n`;
  
  message += `üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> ${orderDate}\n`;
  message += `üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> ${orderNumber}`;
  
  return message;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
export const generateOrderNumber = () => {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000);
  return `${timestamp}${random}`.slice(-8); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Ü–∏—Ñ—Ä
};
